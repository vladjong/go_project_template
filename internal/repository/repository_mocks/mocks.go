// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vladjong/go_project_template/internal/entity"
	dto "github.com/vladjong/go_project_template/internal/entity/dto"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockRepository) AddPeer(ctx context.Context, item dto.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockRepositoryMockRecorder) AddPeer(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockRepository)(nil).AddPeer), ctx, item)
}

// GetPeers mocks base method.
func (m *MockRepository) GetPeers(ctx context.Context) ([]entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers", ctx)
	ret0, _ := ret[0].([]entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockRepositoryMockRecorder) GetPeers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockRepository)(nil).GetPeers), ctx)
}

// MockPeer is a mock of Peer interface.
type MockPeer struct {
	ctrl     *gomock.Controller
	recorder *MockPeerMockRecorder
}

// MockPeerMockRecorder is the mock recorder for MockPeer.
type MockPeerMockRecorder struct {
	mock *MockPeer
}

// NewMockPeer creates a new mock instance.
func NewMockPeer(ctrl *gomock.Controller) *MockPeer {
	mock := &MockPeer{ctrl: ctrl}
	mock.recorder = &MockPeerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeer) EXPECT() *MockPeerMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockPeer) AddPeer(ctx context.Context, item dto.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockPeerMockRecorder) AddPeer(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockPeer)(nil).AddPeer), ctx, item)
}

// GetPeers mocks base method.
func (m *MockPeer) GetPeers(ctx context.Context) ([]entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers", ctx)
	ret0, _ := ret[0].([]entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockPeerMockRecorder) GetPeers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockPeer)(nil).GetPeers), ctx)
}
